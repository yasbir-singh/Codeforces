// dont worry!~
#include<bits/stdc++.h>
using namespace std;
 
vector<int> v;

// traverse function is traversing table in snake like path ---------> and storing the values in "v"
//                                                          <--------
//                                                          --------->

void traverse(int r, int c){
    
    for(int i=1; i<=r; i++){
        if(i%2){
            for(int j=1; j<=c; j++){
                v.push_back(i);
                v.push_back(j);
            }
        } else {
            for(int j=c; j>0; j--){
                v.push_back(i);
                v.push_back(j);
            }
        }
    }
    return;
}

int main(){
    int r, c, k, cnt=0, t;
    cin >> r >> c >> k;
    t = k;

    traverse(r, c);
    
    // these are printing lenth of first array.
    if(k==1)cout << r*c << " ";
    else cout << "2" << " ";
    
    
    // this is printing values from vector "v" according to lenth.
    // we have k-1 tubes of lenth 2 and one tube of remaing path (r*c)-[(k-1)*2];
    for(int i=0; i<v.size(); i++){
        if(cnt==4){
            cout << "\n";
            k--;
            cnt=0;
            
            // these if/else statments printing length of next tubes.
            if(k==1)cout << (r*c)-((t-1)*2) << " ";
            else cout << "2" << " ";
        }
        cout << v[i] << " ";
        
        // if k==1 then we have to print remaning table, which can be done if we dont increase "cnt"
        if(k!=1) cnt++;
    }
    return 0;
}



/*
  Explanation:
       The solution is pretty simple. First we need to make such route that visits every cell exactly one time. It is not difficult:

       Initially we stay in (1, 1) cell. Moving from left to right, we should reach (1, m) cell.
       Move to the next line, in (2, m) cell. Moving from right to left, we should reach the most left sell of 2nd line, (2, 1).
       Move to the next line. Repeat 1. and 2. while we have not all cells visited.
                --------->
                <---------
                --------->

      After that, we can easily find the solution: you can make first (k - 1) tubes length be 2, and the last k tube will consist from cells left.
*/
